import React, { useState, useEffect } from 'react';
import './SongPage.css';

const moods = [
  { emoji: 'üòä', label: 'happy', description: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç' },
  { emoji: 'üò¢', label: 'sad', description: '‡πÄ‡∏®‡∏£‡πâ‡∏≤' },
  { emoji: 'üò†', label: 'angry', description: '‡πÇ‡∏Å‡∏£‡∏ò' },
  { emoji: 'üò∞', label: 'anxious', description: '‡∏Å‡∏±‡∏á‡∏ß‡∏•' },
  { emoji: 'üò¥', label: 'tired', description: '‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢' },
  { emoji: 'üòå', label: 'relaxed', description: '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢' }
];

const genres = [
  { emoji: 'üéµ', label: 'pop', description: '‡∏õ‡πä‡∏≠‡∏õ' },
  { emoji: 'üé∏', label: 'rock', description: '‡∏£‡πá‡∏≠‡∏Ñ' },
  { emoji: 'üé∑', label: 'jazz', description: '‡πÅ‡∏à‡πä‡∏™' },
  { emoji: 'üéª', label: 'classical', description: '‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Å' },
  { emoji: 'üé§', label: 'hip-hop', description: '‡∏Æ‡∏¥‡∏õ‡∏Æ‡∏≠‡∏õ' },
  { emoji: 'üéß', label: 'electronic', description: '‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå' }
];

const SongPage = () => {
  const [selectedMood, setSelectedMood] = useState(null);
  const [selectedGenre, setSelectedGenre] = useState(null);
  const [playlists, setPlaylists] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPlaylists = async () => {
      try {
        setLoading(true);
        setError(null);

        const response = await fetch(
          `https://mood-muse-backend.onrender.com/api/songs/${selectedMood}/${selectedGenre}`
        );

        if (!response.ok) {
          throw new Error('Failed to fetch playlists');
        }

        const data = await response.json();
        setPlaylists(data);
      } catch (err) {
        setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå');
        console.error('Error fetching playlists:', err);
      } finally {
        setLoading(false);
      }
    };

    if (selectedMood && selectedGenre) {
      fetchPlaylists();
    }
  }, [selectedMood, selectedGenre]);

  return (
    <div className="song-page">
      <div className="container">

        <div className="selection-container">
          <div className="mood-selection">
            <h2>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</h2>
            <p className="description">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à</p>
            <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
            <div className="mood-buttons">
              {moods.map((mood) => (
                <button
                  key={mood.label}
                  className={`mood-button ${selectedMood === mood.label ? 'selected' : ''}`}
                  onClick={() => setSelectedMood(mood.label)}
                >
                  <span className="emoji">{mood.emoji}</span>
                  <span className="label">{mood.description}</span>
                </button>
              ))}
            </div>
          </div>

          <div className="genre-selection">
            <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏û‡∏•‡∏á</h3>
            <div className="genre-buttons">
              {genres.map((genre) => (
                <button
                  key={genre.label}
                  className={`genre-button ${selectedGenre === genre.label ? 'selected' : ''}`}
                  onClick={() => setSelectedGenre(genre.label)}
                >
                  <span className="emoji">{genre.emoji}</span>
                  <span className="label">{genre.description}</span>
                </button>
              ))}
            </div>
          </div>
        </div>

        {loading && <div className="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>}
        {error && <div className="error">{error}</div>}

        {playlists.length > 0 && (
          <div className="playlists">
            <h2>‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h2>
            <div className="playlist-grid">
              {playlists.map((playlist) => (
                <div key={playlist.id} className="playlist-card">
                  <img
                    src={playlist.imageUrl}
                    alt={playlist.name}
                    className="playlist-image"
                  />
                  <div className="playlist-info">
                    <h3>{playlist.name}</h3>
                    <p>{playlist.description}</p>
                    <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏•‡∏á: {playlist.tracks}</p>
                    <a
                      href={playlist.spotifyUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="spotify-link"
                    >
                      ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Spotify
                    </a>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default SongPage;
