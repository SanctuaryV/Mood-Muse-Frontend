import React, { useState } from 'react'
import './Page.css'

const moods = [
  { emoji: 'üòä', label: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', value: 'happy' },
  { emoji: 'üò¢', label: '‡πÄ‡∏®‡∏£‡πâ‡∏≤', value: 'sad' },
  { emoji: 'üò°', label: '‡πÇ‡∏Å‡∏£‡∏ò', value: 'angry' },
  { emoji: 'üò∞', label: '‡∏Å‡∏±‡∏á‡∏ß‡∏•', value: 'anxious' },
  { emoji: 'üò¥', label: '‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢', value: 'tired' },
  { emoji: 'üòå', label: '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢', value: 'relaxed' }
]

const genres = [
  {
    name: '‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏£‡∏±‡∏Å',
    emoji: 'üíï',
    description: '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à'
  },
  {
    emoji: 'üìö',
    name: '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á',
    description: '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î'
  },
  {
    emoji: 'üé≠',
    name: '‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡πÅ‡∏ü‡∏ô‡∏ï‡∏≤‡∏ã‡∏µ',
    description: '‡πÇ‡∏•‡∏Å‡πÅ‡∏´‡πà‡∏á‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå'
  },
  {
    emoji: 'üîç',
    name: '‡∏™‡∏∑‡∏ö‡∏™‡∏ß‡∏ô‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô',
    description: '‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏Ç'
  },
  {
    emoji: 'üåç',
    name: '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß',
    description: '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢'
  },
  {
    emoji: 'üé®',
    name: '‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå',
    description: '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏•‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå'
  }
]

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
const fallbackBooks = [
  {
    title: '‡∏Ñ‡∏¥‡∏î‡∏à‡∏∞‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡πÉ‡∏Ñ‡∏£...',
    author: '‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å',
    description: '‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡∏µ‡πâ‡∏Ñ‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πà‡πÄ‡πÄ‡∏à‡πä‡∏Ñ',
    rating: '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è'
  },
  {
    title: '‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤ ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡∏á‡∏á?',
    author: 'Huhi',
    description: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏±‡πâ‡∏ö‡∏ó‡πà‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏°',
    rating: '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è'
  }
]

const BookPage = () => {
  const [selectedMood, setSelectedMood] = useState(null)
  const [selectedGenre, setSelectedGenre] = useState(null)
  const [recommendations, setRecommendations] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const handleMoodSelect = mood => {
    setSelectedMood(mood)
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    setRecommendations(null)
  }

  const handleGenreSelect = async genre => {
    setSelectedGenre(genre)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    if (selectedMood) {
      try {
        setLoading(true)
        setError(null)

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏≤‡∏Å backend
        const moodValue = encodeURIComponent(selectedMood.value)
        const genreName = encodeURIComponent(genre.name)

        const apiUrl = `https://mood-muse-backend.onrender.com/api/books/${moodValue}/${genreName}`

        console.log('‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API URL:', apiUrl)

        const response = await fetch(apiUrl, {
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
          },
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° mode: 'cors' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CORS
          mode: 'cors'
        })

        console.log('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:', response.status, response.statusText)

        if (!response.ok) {
          // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö error 404 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
          if (response.status === 404) {
            console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö API endpoint ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô')
            setRecommendations(fallbackBooks)
            return
          }

          throw new Error(
            `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ: ${response.status} ${response.statusText}`
          )
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content-type
        const contentType = response.headers.get('content-type')
        if (!contentType || !contentType.includes('application/json')) {
          console.warn('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON:', contentType)

          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
          const textData = await response.text()
          console.error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', textData)

          // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö JSON
          console.warn('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô')
          setRecommendations(fallbackBooks)
          return
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content-type ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
        const responseClone = response.clone() // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á response
        try {
          const books = await response.json()
          setRecommendations(Array.isArray(books) ? books : [books])
        } catch (jsonError) {
          console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô JSON:', jsonError)

          // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
          const textData = await responseClone.text()
          console.error('‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', textData)

          // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
          console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô')
          setRecommendations(fallbackBooks)
        }
      } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠:', error)
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        setRecommendations(fallbackBooks)
      } finally {
        setLoading(false)
      }
    }
  }

  return (
    <div className='book-container'>
      <section className='book-section'>
        <h1>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠</h1>
        <p className='description'>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à</p>

        <div className='mood-selection'>
          <h2>‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?</h2>
          <div className='mood-grid'>
            {moods.map(mood => (
              <button
                key={mood.value}
                className={`mood-button ${
                  selectedMood === mood ? 'selected' : ''
                }`}
                onClick={() => handleMoodSelect(mood)}
              >
                <span className='emoji' role='img' aria-label={mood.label}>
                  {mood.emoji}
                </span>
                <span className='label'>{mood.label}</span>
              </button>
            ))}
          </div>
        </div>

        <div className='genre-selection'>
          <h2>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à</h2>
          <div className='genre-grid'>
            {genres.map(genre => (
              <button
                key={genre.name}
                className={`genre-button ${
                  selectedGenre === genre ? 'selected' : ''
                }`}
                onClick={() => handleGenreSelect(genre)}
              >
                <span className='emoji' role='img' aria-label={genre.name}>
                  {genre.emoji}
                </span>
                <span className='name'>{genre.name}</span>
                <span className='description'>{genre.description}</span>
              </button>
            ))}
          </div>
        </div>

        {loading && (
          <div className='loading'>
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì...</p>
          </div>
        )}

        {error && (
          <div className='error'>
            <p>{error}</p>
          </div>
        )}

        {recommendations && (
          <div className='recommendations'>
            <h2>‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì</h2>
            <div className='books-grid'>
              {recommendations.map((book, index) => (
                <div key={index} className='book-card'>
                  <div className='book-header'>
                    <h3>{book.title}</h3>
                    <span className='rating'>{book.rating}</span>
                  </div>
                  <p className='author'>‡πÇ‡∏î‡∏¢ {book.author}</p>
                  <p className='book-description'>{book.description}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </section>
    </div>
  )
}

export default BookPage
