import React, { useState } from 'react'
import './Page.css'

const moods = [
  { emoji: 'üòä', label: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', value: 'happy' },
  { emoji: 'üò¢', label: '‡πÄ‡∏®‡∏£‡πâ‡∏≤', value: 'sad' },
  { emoji: 'üò°', label: '‡πÇ‡∏Å‡∏£‡∏ò', value: 'angry' },
  { emoji: 'üò∞', label: '‡∏Å‡∏±‡∏á‡∏ß‡∏•', value: 'anxious' },
  { emoji: 'üò¥', label: '‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢', value: 'tired' },
  { emoji: 'üòå', label: '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢', value: 'relaxed' }
]

const cuisines = [
  {
    name: '‡πÑ‡∏ó‡∏¢',
    emoji: 'üçú',
    description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô'
  },
  {
    emoji: 'üç£',
    name: '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô',
    description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥'
  },
  {
    emoji: 'üçï',
    name: '‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô',
    description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô'
  },
  {
    emoji: 'üåÆ',
    name: '‡πÄ‡∏°‡πá‡∏Å‡∏ã‡∏¥‡∏Å‡∏±‡∏ô',
    description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡πá‡∏Å‡∏ã‡∏¥‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥'
  },
  {
    emoji: 'üçî',
    name: '‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô',
    description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á'
  },
  {
    emoji: 'ü•ó',
    name: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
    description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏î‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
  }
]

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
const fallbackFoods = [
  {
    name: '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î',
    restaurant: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏£‡∏™‡πÄ‡∏î‡πá‡∏î',
    description: '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ô‡∏∏‡πà‡∏°‡∏´‡∏≠‡∏° ‡∏ú‡∏±‡∏î‡∏Å‡∏±‡∏ö‡∏ã‡∏≠‡∏™‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏ô‡πà‡∏ô',
    rating: '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è'
  },
  {
    name: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡πâ‡∏ô',
    restaurant: '‡∏Ñ‡∏£‡∏±‡∏ß‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ',
    description: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏£‡∏™‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô ‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡πÄ‡∏ú‡πá‡∏î‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏° ‡∏ô‡πâ‡∏≥‡∏ã‡∏∏‡∏õ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô',
    rating: '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è'
  }
]

const FoodPage = () => {
  const [selectedMood, setSelectedMood] = useState(null)
  const [selectedCuisine, setSelectedCuisine] = useState(null)
  const [recommendations, setRecommendations] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const handleMoodSelect = mood => {
    setSelectedMood(mood)
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    setRecommendations(null)
  }

  const handleCuisineSelect = async cuisine => {
    setSelectedCuisine(cuisine)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß
    if (selectedMood) {
      try {
        setLoading(true)
        setError(null)

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏≤‡∏Å backend
        const moodValue = encodeURIComponent(selectedMood.value)
        const cuisineName = encodeURIComponent(cuisine.name)

        const apiUrl = `https://mood-muse-backend.onrender.com/api/food/${moodValue}/${cuisineName}`

        console.log('‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API URL:', apiUrl)

        const response = await fetch(apiUrl, {
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
          },
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° mode: 'cors' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CORS
          mode: 'cors'
        })

        console.log('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:', response.status, response.statusText)

        if (!response.ok) {
          // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö error 404 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
          if (response.status === 404) {
            console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö API endpoint ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô')
            setRecommendations(fallbackFoods)
            return
          }

          throw new Error(
            `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ: ${response.status} ${response.statusText}`
          )
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content-type
        const contentType = response.headers.get('content-type')
        if (!contentType || !contentType.includes('application/json')) {
          console.warn('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON:', contentType)

          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
          const textData = await response.text()
          console.error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', textData)

          // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö JSON
          console.warn('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô')
          setRecommendations(fallbackFoods)
          return
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content-type ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
        const responseClone = response.clone() // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á response
        try {
          const foods = await response.json()
          setRecommendations(Array.isArray(foods) ? foods : [foods])
        } catch (jsonError) {
          console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô JSON:', jsonError)

          // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
          const textData = await responseClone.text()
          console.error('‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', textData)

          // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
          console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô')
          setRecommendations(fallbackFoods)
        }
      } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£:', error)
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        setRecommendations(fallbackFoods)
      } finally {
        setLoading(false)
      }
    }
  }

  return (
    <div className='book-container'>
      <section className='book-section'>
        <h1>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h1>
        <p className='description'>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à</p>

        <div className='mood-selection'>
          <h2>‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?</h2>
          <div className='mood-grid'>
            {moods.map(mood => (
              <button
                key={mood.value}
                className={`mood-button ${
                  selectedMood === mood ? 'selected' : ''
                }`}
                onClick={() => handleMoodSelect(mood)}
              >
                <span className='emoji' role='img' aria-label={mood.label}>
                  {mood.emoji}
                </span>
                <span className='label'>{mood.label}</span>
              </button>
            ))}
          </div>
        </div>

        <div className='genre-selection'>
          <h2>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à</h2>
          <div className='genre-grid'>
            {cuisines.map(cuisine => (
              <button
                key={cuisine.name}
                className={`genre-button ${
                  selectedCuisine === cuisine ? 'selected' : ''
                }`}
                onClick={() => handleCuisineSelect(cuisine)}
              >
                <span className='emoji' role='img' aria-label={cuisine.name}>
                  {cuisine.emoji}
                </span>
                <span className='name'>{cuisine.name}</span>
                <span className='description'>{cuisine.description}</span>
              </button>
            ))}
          </div>
        </div>

        {loading && (
          <div className='loading'>
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì...</p>
          </div>
        )}

        {error && (
          <div className='error'>
            <p>{error}</p>
          </div>
        )}

        {recommendations && (
          <div className='recommendations'>
            <h2>‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì</h2>
            <div className='books-grid'>
              {recommendations.map((food, index) => (
                <div key={index} className='book-card'>
                  <div className='book-header'>
                    <h3>{food.name}</h3>
                    <span className='rating'>{food.rating}</span>
                  </div>
                  <p className='author'>‡∏£‡πâ‡∏≤‡∏ô {food.restaurant}</p>
                  <p className='book-description'>{food.description}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </section>
    </div>
  )
}

export default FoodPage
